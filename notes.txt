
- What are ways to do this?
  - Webapp with a databse
  - Webapp with no database that just scrapes S3
  - Static HTML that is autogenerated when I add a song

Okay, we want uploading the song to be pretty trivial though.

Hmm... do we need a backend? Can we just have a public S3 bucket and the JS scrapes it, interprets the data however?

OK, I like the S3 idea.
  - How to structure it?
    - We could keep all songs flat. But then it's hard to view them by album, artist, or whatever.
      - Here's an idea: we store them like artist/album/songname. Then we list all items in the bucket, parse their album/artist info in the JS, and display it however we want. Listing all items should be fine since there are only 2,000, it's not in danger of growing that much, and each API call is like 1,000 items.

*****

Here's the waveform-drawing code in case I need it.

{/*
<div>
  <canvas ref={this.canvas}>
  </canvas>
</div>
*/}

// const WIDTH = 400;
// const HEIGHT = 200;
// const canvasCtx = this.canvas.current.getContext('2d');
// canvasCtx.fillStyle = 'rgb(200, 200, 200)';
// canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);

// canvasCtx.lineWidth = 2;
// canvasCtx.strokeStyle = 'rgb(0, 0, 0)';

// const sliceWidth = WIDTH * 1.0 / bufferLength;
// let x = 0;

// canvasCtx.beginPath();
// for (var i = 0; i < bufferLength; i++) {
//   const v = dataArray[i]/128.0;
//   const y = v * HEIGHT/2;

//   if(i === 0)
//     canvasCtx.moveTo(x, y);
//   else
//     canvasCtx.lineTo(x, y);

//   x += sliceWidth;
// }

// canvasCtx.lineTo(WIDTH, HEIGHT/2);
// canvasCtx.stroke();

*****

3-8-20

TODOS:
  - Preserve album order.
  - Cool visual effects as the music is playing?
    - Implementation: X
    - Tests: haha
